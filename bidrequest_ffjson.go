// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: bidrequest.go

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *BidRequest) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *BidRequest) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "id":`)
	fflib.WriteJsonString(buf, string(j.ID))
	buf.WriteByte(',')
	if len(j.Imp) != 0 {
		buf.WriteString(`"imp":`)
		if j.Imp != nil {
			buf.WriteString(`[`)
			for i, v := range j.Imp {
				if i != 0 {
					buf.WriteString(`,`)
				}
				/* Struct fall back. type=openrtb.Impression kind=struct */
				err = buf.Encode(&v)
				if err != nil {
					return err
				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if true {
		/* Struct fall back. type=openrtb.Site kind=struct */
		buf.WriteString(`"site":`)
		err = buf.Encode(&j.Site)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if true {
		/* Struct fall back. type=openrtb.App kind=struct */
		buf.WriteString(`"app":`)
		err = buf.Encode(&j.App)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if true {
		/* Struct fall back. type=openrtb.Device kind=struct */
		buf.WriteString(`"device":`)
		err = buf.Encode(&j.Device)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if true {
		/* Struct fall back. type=openrtb.User kind=struct */
		buf.WriteString(`"user":`)
		err = buf.Encode(&j.User)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if j.Test != 0 {
		buf.WriteString(`"test":`)
		fflib.FormatBits2(buf, uint64(j.Test), 10, j.Test < 0)
		buf.WriteByte(',')
	}
	buf.WriteString(`"at":`)
	fflib.FormatBits2(buf, uint64(j.AuctionType), 10, j.AuctionType < 0)
	buf.WriteByte(',')
	if j.TMax != 0 {
		buf.WriteString(`"tmax":`)
		fflib.FormatBits2(buf, uint64(j.TMax), 10, j.TMax < 0)
		buf.WriteByte(',')
	}
	if len(j.WSeat) != 0 {
		buf.WriteString(`"wseat":`)
		if j.WSeat != nil {
			buf.WriteString(`[`)
			for i, v := range j.WSeat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.BSeat) != 0 {
		buf.WriteString(`"bseat":`)
		if j.BSeat != nil {
			buf.WriteString(`[`)
			for i, v := range j.BSeat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.WLang) != 0 {
		buf.WriteString(`"wlang":`)
		if j.WLang != nil {
			buf.WriteString(`[`)
			for i, v := range j.WLang {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.AllImps != 0 {
		buf.WriteString(`"allimps":`)
		fflib.FormatBits2(buf, uint64(j.AllImps), 10, j.AllImps < 0)
		buf.WriteByte(',')
	}
	if len(j.Cur) != 0 {
		buf.WriteString(`"cur":`)
		if j.Cur != nil {
			buf.WriteString(`[`)
			for i, v := range j.Cur {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Bcat) != 0 {
		buf.WriteString(`"bcat":`)
		if j.Bcat != nil {
			buf.WriteString(`[`)
			for i, v := range j.Bcat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.BAdv) != 0 {
		buf.WriteString(`"badv":`)
		if j.BAdv != nil {
			buf.WriteString(`[`)
			for i, v := range j.BAdv {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.BApp) != 0 {
		buf.WriteString(`"bapp":`)
		if j.BApp != nil {
			buf.WriteString(`[`)
			for i, v := range j.BApp {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.Source != nil {
		if true {
			/* Struct fall back. type=openrtb.Source kind=struct */
			buf.WriteString(`"source":`)
			err = buf.Encode(j.Source)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if true {
		/* Struct fall back. type=openrtb.Regulations kind=struct */
		buf.WriteString(`"regs":`)
		err = buf.Encode(&j.Regs)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if len(j.Ext) != 0 {
		buf.WriteString(`"ext":`)

		{

			obj, err = j.Ext.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.Pmp != nil {
		if true {
			/* Struct fall back. type=openrtb.Pmp kind=struct */
			buf.WriteString(`"pmp":`)
			err = buf.Encode(j.Pmp)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtBidRequestbase = iota
	ffjtBidRequestnosuchkey

	ffjtBidRequestID

	ffjtBidRequestImp

	ffjtBidRequestSite

	ffjtBidRequestApp

	ffjtBidRequestDevice

	ffjtBidRequestUser

	ffjtBidRequestTest

	ffjtBidRequestAuctionType

	ffjtBidRequestTMax

	ffjtBidRequestWSeat

	ffjtBidRequestBSeat

	ffjtBidRequestWLang

	ffjtBidRequestAllImps

	ffjtBidRequestCur

	ffjtBidRequestBcat

	ffjtBidRequestBAdv

	ffjtBidRequestBApp

	ffjtBidRequestSource

	ffjtBidRequestRegs

	ffjtBidRequestExt

	ffjtBidRequestPmp
)

var ffjKeyBidRequestID = []byte("id")

var ffjKeyBidRequestImp = []byte("imp")

var ffjKeyBidRequestSite = []byte("site")

var ffjKeyBidRequestApp = []byte("app")

var ffjKeyBidRequestDevice = []byte("device")

var ffjKeyBidRequestUser = []byte("user")

var ffjKeyBidRequestTest = []byte("test")

var ffjKeyBidRequestAuctionType = []byte("at")

var ffjKeyBidRequestTMax = []byte("tmax")

var ffjKeyBidRequestWSeat = []byte("wseat")

var ffjKeyBidRequestBSeat = []byte("bseat")

var ffjKeyBidRequestWLang = []byte("wlang")

var ffjKeyBidRequestAllImps = []byte("allimps")

var ffjKeyBidRequestCur = []byte("cur")

var ffjKeyBidRequestBcat = []byte("bcat")

var ffjKeyBidRequestBAdv = []byte("badv")

var ffjKeyBidRequestBApp = []byte("bapp")

var ffjKeyBidRequestSource = []byte("source")

var ffjKeyBidRequestRegs = []byte("regs")

var ffjKeyBidRequestExt = []byte("ext")

var ffjKeyBidRequestPmp = []byte("pmp")

// UnmarshalJSON umarshall json - template of ffjson
func (j *BidRequest) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *BidRequest) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtBidRequestbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtBidRequestnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyBidRequestApp, kn) {
						currentKey = ffjtBidRequestApp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestAuctionType, kn) {
						currentKey = ffjtBidRequestAuctionType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestAllImps, kn) {
						currentKey = ffjtBidRequestAllImps
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyBidRequestBSeat, kn) {
						currentKey = ffjtBidRequestBSeat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestBcat, kn) {
						currentKey = ffjtBidRequestBcat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestBAdv, kn) {
						currentKey = ffjtBidRequestBAdv
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestBApp, kn) {
						currentKey = ffjtBidRequestBApp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyBidRequestCur, kn) {
						currentKey = ffjtBidRequestCur
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyBidRequestDevice, kn) {
						currentKey = ffjtBidRequestDevice
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyBidRequestExt, kn) {
						currentKey = ffjtBidRequestExt
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyBidRequestID, kn) {
						currentKey = ffjtBidRequestID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestImp, kn) {
						currentKey = ffjtBidRequestImp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyBidRequestPmp, kn) {
						currentKey = ffjtBidRequestPmp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyBidRequestRegs, kn) {
						currentKey = ffjtBidRequestRegs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyBidRequestSite, kn) {
						currentKey = ffjtBidRequestSite
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestSource, kn) {
						currentKey = ffjtBidRequestSource
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyBidRequestTest, kn) {
						currentKey = ffjtBidRequestTest
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestTMax, kn) {
						currentKey = ffjtBidRequestTMax
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyBidRequestUser, kn) {
						currentKey = ffjtBidRequestUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyBidRequestWSeat, kn) {
						currentKey = ffjtBidRequestWSeat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidRequestWLang, kn) {
						currentKey = ffjtBidRequestWLang
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestPmp, kn) {
					currentKey = ffjtBidRequestPmp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestExt, kn) {
					currentKey = ffjtBidRequestExt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestRegs, kn) {
					currentKey = ffjtBidRequestRegs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestSource, kn) {
					currentKey = ffjtBidRequestSource
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestBApp, kn) {
					currentKey = ffjtBidRequestBApp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestBAdv, kn) {
					currentKey = ffjtBidRequestBAdv
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestBcat, kn) {
					currentKey = ffjtBidRequestBcat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestCur, kn) {
					currentKey = ffjtBidRequestCur
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestAllImps, kn) {
					currentKey = ffjtBidRequestAllImps
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestWLang, kn) {
					currentKey = ffjtBidRequestWLang
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestBSeat, kn) {
					currentKey = ffjtBidRequestBSeat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestWSeat, kn) {
					currentKey = ffjtBidRequestWSeat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestTMax, kn) {
					currentKey = ffjtBidRequestTMax
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestAuctionType, kn) {
					currentKey = ffjtBidRequestAuctionType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestTest, kn) {
					currentKey = ffjtBidRequestTest
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestUser, kn) {
					currentKey = ffjtBidRequestUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestDevice, kn) {
					currentKey = ffjtBidRequestDevice
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestApp, kn) {
					currentKey = ffjtBidRequestApp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBidRequestSite, kn) {
					currentKey = ffjtBidRequestSite
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestImp, kn) {
					currentKey = ffjtBidRequestImp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidRequestID, kn) {
					currentKey = ffjtBidRequestID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtBidRequestnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtBidRequestID:
					goto handle_ID

				case ffjtBidRequestImp:
					goto handle_Imp

				case ffjtBidRequestSite:
					goto handle_Site

				case ffjtBidRequestApp:
					goto handle_App

				case ffjtBidRequestDevice:
					goto handle_Device

				case ffjtBidRequestUser:
					goto handle_User

				case ffjtBidRequestTest:
					goto handle_Test

				case ffjtBidRequestAuctionType:
					goto handle_AuctionType

				case ffjtBidRequestTMax:
					goto handle_TMax

				case ffjtBidRequestWSeat:
					goto handle_WSeat

				case ffjtBidRequestBSeat:
					goto handle_BSeat

				case ffjtBidRequestWLang:
					goto handle_WLang

				case ffjtBidRequestAllImps:
					goto handle_AllImps

				case ffjtBidRequestCur:
					goto handle_Cur

				case ffjtBidRequestBcat:
					goto handle_Bcat

				case ffjtBidRequestBAdv:
					goto handle_BAdv

				case ffjtBidRequestBApp:
					goto handle_BApp

				case ffjtBidRequestSource:
					goto handle_Source

				case ffjtBidRequestRegs:
					goto handle_Regs

				case ffjtBidRequestExt:
					goto handle_Ext

				case ffjtBidRequestPmp:
					goto handle_Pmp

				case ffjtBidRequestnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Imp:

	/* handler: j.Imp type=[]openrtb.Impression kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Imp = nil
		} else {

			j.Imp = []Impression{}

			wantVal := true

			for {

				var tmpJImp Impression

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJImp type=openrtb.Impression kind=struct quoted=false*/

				{
					/* Falling back. type=openrtb.Impression kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmpJImp)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				j.Imp = append(j.Imp, tmpJImp)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Site:

	/* handler: j.Site type=openrtb.Site kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Site kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Site)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_App:

	/* handler: j.App type=openrtb.App kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.App kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.App)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Device:

	/* handler: j.Device type=openrtb.Device kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Device kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Device)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=openrtb.User kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.User kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.User)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Test:

	/* handler: j.Test type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Test = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AuctionType:

	/* handler: j.AuctionType type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.AuctionType = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TMax:

	/* handler: j.TMax type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TMax = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_WSeat:

	/* handler: j.WSeat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.WSeat = nil
		} else {

			j.WSeat = []string{}

			wantVal := true

			for {

				var tmpJWSeat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJWSeat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJWSeat = string(string(outBuf))

					}
				}

				j.WSeat = append(j.WSeat, tmpJWSeat)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BSeat:

	/* handler: j.BSeat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.BSeat = nil
		} else {

			j.BSeat = []string{}

			wantVal := true

			for {

				var tmpJBSeat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJBSeat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJBSeat = string(string(outBuf))

					}
				}

				j.BSeat = append(j.BSeat, tmpJBSeat)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_WLang:

	/* handler: j.WLang type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.WLang = nil
		} else {

			j.WLang = []string{}

			wantVal := true

			for {

				var tmpJWLang string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJWLang type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJWLang = string(string(outBuf))

					}
				}

				j.WLang = append(j.WLang, tmpJWLang)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AllImps:

	/* handler: j.AllImps type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.AllImps = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cur:

	/* handler: j.Cur type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Cur = nil
		} else {

			j.Cur = []string{}

			wantVal := true

			for {

				var tmpJCur string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJCur type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJCur = string(string(outBuf))

					}
				}

				j.Cur = append(j.Cur, tmpJCur)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Bcat:

	/* handler: j.Bcat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Bcat = nil
		} else {

			j.Bcat = []string{}

			wantVal := true

			for {

				var tmpJBcat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJBcat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJBcat = string(string(outBuf))

					}
				}

				j.Bcat = append(j.Bcat, tmpJBcat)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BAdv:

	/* handler: j.BAdv type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.BAdv = nil
		} else {

			j.BAdv = []string{}

			wantVal := true

			for {

				var tmpJBAdv string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJBAdv type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJBAdv = string(string(outBuf))

					}
				}

				j.BAdv = append(j.BAdv, tmpJBAdv)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BApp:

	/* handler: j.BApp type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.BApp = nil
		} else {

			j.BApp = []string{}

			wantVal := true

			for {

				var tmpJBApp string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJBApp type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJBApp = string(string(outBuf))

					}
				}

				j.BApp = append(j.BApp, tmpJBApp)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Source:

	/* handler: j.Source type=openrtb.Source kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Source kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Source)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Regs:

	/* handler: j.Regs type=openrtb.Regulations kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Regulations kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Regs)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: j.Ext type=openrtb.Extension kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Ext.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Pmp:

	/* handler: j.Pmp type=openrtb.Pmp kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Pmp kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Pmp)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
